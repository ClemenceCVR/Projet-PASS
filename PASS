"""Fonction qui calcule le coefficient de Zipf"""
import requests
from bs4 import BeautifulSoup
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import linregress



def calcule_coefficient_zipf_usa(nb):
    #on scrape les informations des villes des États-Unis sur Wikipedia
    url = "https://en.wikipedia.org/wiki/List_of_metropolitan_statistical_areas"
    reponse = requests.get(url)
    soup = BeautifulSoup(reponse.content, 'html.parser')
    tableau = soup.find_all('table')[1]
    rows = tableau.find_all('tr')[1:]

    #on extrait le nom et la population de chaque zone métropolitaine
    zones_metropolitaines = []
    for row in rows:
        cells = row.find_all('td')
        nom = cells[0].text.strip()
        population = int(cells[2].text.replace(',', ''))
        zones_metropolitaines.append({'nom': nom, 'population': population})

    #on trie les zones métropolitaines par taille de population
    zones_metropolitaines = sorted(zones_metropolitaines, key=lambda x: x['population'], reverse=True)

    #on garde les plus grandes zones métropolitaines
    zones_metropolitaines = zones_metropolitaines[:nb]

    # On calcule le logarithme de la taille et du rang de chaque zone métropolitaine
    zones_metropolitaines = [{'nom': zone['nom'], 'log_taille': np.log(zone['population']), 'log_rang': np.log(index + 1)} for index, zone in enumerate(zones_metropolitaines)]

    #on vérifie si les données suivent la loi de Zipf
    coefficient_zipf = np.polyfit([zone['log_rang'] for zone in zones_metropolitaines], [zone['log_taille'] for zone in zones_metropolitaines], 1)[0]
    print('Le coefficient de Zipf pour les', nb, f'premières villes des USA est : {coefficient_zipf:.3f}')


"""Fonction qui affiche le graphique et calcule le coefficient de Zipf USA"""


def afficher_log_zipf_usa(nb):
    #on recupère la liste des zones métropolitaines des États-Unis depuis Wikipédia
    url = "https://en.wikipedia.org/wiki/List_of_metropolitan_statistical_areas"
    reponse = requests.get(url)
    soup = BeautifulSoup(reponse.content, 'html.parser')
    table = soup.find_all('table')[1]
    lignes = table.find_all('tr')[1:]

    #on extrait le nom et la population de chaque zone métropolitaine
    zones_metropolitaines = []
    for ligne in lignes:
        cellules = ligne.find_all('td')
        nom = cellules[0].text.strip()
        population = int(cellules[2].text.replace(',', ''))
        zones_metropolitaines.append({'nom': nom, 'population': population})

    #on trie les zones métropolitaines par taille de population
    zones_metropolitaines = sorted(zones_metropolitaines, key=lambda x: x['population'], reverse=True)

    #on prend les plus grandes zones métropolitaines
    zones_metropolitaines = zones_metropolitaines[:nb]

    #on calcule le logarithme de la population et du rang de chaque zone métropolitaine
    log_tailles = [np.log(zone['population']) for zone in zones_metropolitaines]
    log_rangs = [np.log(index + 1) for index, zone in enumerate(zones_metropolitaines)]

    #on calcule le coefficient de Zipf
    pente, ordonnee_origine, r_value, p_value, std_err = linregress(log_tailles, log_rangs)
    coefficient_zipf = pente

    #on trace le graphique du logarithme de la population en fonction du logarithme du rang
    plt.plot(log_tailles, log_rangs, marker='.', linestyle='')

    #on ajoute des étiquettes d'axe et un titre au graphique
    plt.xlabel('Log Taille')
    plt.ylabel('Log Rang')
    titre=str(nb)+' premières aires métropolitaines des États-Unis classées par taille de population'
    plt.title(titre)

    #on calcule la droite de régression linéaire et la valeur R²
    x = np.array([min(log_tailles), max(log_tailles)])
    y = pente * x + ordonnee_origine
    r_carre = r_value ** 2

    #on ajoute la droite de régression linéaire, la valeur R² et le coefficient de Zipf au graphique
    plt.plot(x, y, color='turquoise', linewidth=0.7)
    plt.text(14, 1, f'R²: {r_carre:.2f}\nCoefficient de Zipf: {coefficient_zipf:.2f}')

    #on affiche le graphique
    plt.show()






"""Fonction qui affiche le graphique et calcule le coefficient de Zipf France"""


def afficher_log_zipf_fr(nb):
    #on recupère la liste des zones métropolitaines des États-Unis depuis Wikipédia
    url = "https://fr.wikipedia.org/wiki/Liste_des_aires_urbaines_de_France"
    reponse = requests.get(url)
    soup = BeautifulSoup(reponse.content, 'html.parser')
    table = soup.find_all('table')[0]
    lignes = table.find_all('tr')[1:]

    #on extrait le nom et la population de chaque zone métropolitaine
    aires_metropolitaines = []
    for ligne in lignes:
        cellules = ligne.find_all('td')
        nom = cellules[1].text.strip()
        population = int(cellules[2].text.replace(u'\xa0', '').replace(' ', ''))
        aires_metropolitaines.append({'nom': nom, 'population': population})

    #on trie les aires métropolitaines par taille de population
    aires_metropolitaines = sorted(aires_metropolitaines, key=lambda x: x['population'], reverse=True)

    #on prend les plus grandes aires métropolitaines
    aires_metropolitaines = aires_metropolitaines[:nb]

    #on calcule le logarithme de la population et du rang de chaque aire métropolitaine
    log_tailles = [np.log(aire['population']) for aire in aires_metropolitaines]
    log_rangs = [np.log(index + 1) for index, aire in enumerate(aires_metropolitaines)]

    #on calcule le coefficient de Zipf
    pente, ordonnee_origine, r_value, p_value, std_err = linregress(log_tailles, log_rangs)
    coefficient_zipf = pente

    #on trace le graphique du logarithme de la population en fonction du logarithme du rang
    plt.plot(log_tailles, log_rangs, marker='.', linestyle='')

    #on ajoute des étiquettes d'axe et un titre au graphique
    plt.xlabel('Log Population')
    plt.ylabel('Log Rang')
    titre=str(nb)+' premières aires métropolitaines de France classées par taille de population'
    plt.title(titre)

    #on calcule la droite de régression linéaire et la valeur R²
    x = np.array([min(log_tailles), max(log_tailles)])
    y = pente * x + ordonnee_origine
    r_carre = r_value ** 2

    #on ajoute la droite de régression linéaire, la valeur R² et le coefficient de Zipf au graphique
    plt.plot(x, y, color='turquoise', linewidth=0.7)
    plt.text(14, 1, f'R²: {r_carre:.2f}\nCoefficient de Zipf: {coefficient_zipf:.2f}')

    #on affiche le graphique
    plt.show()




'''Fonction qui simule la croissance ou décroissance d'une ville de 50000 de +/- 2% chaque année'''


# import numpy as np
# import matplotlib.pyplot as plt
#
# # Définir les paramètres de la ville initiale
# taille_ville_initiale = 50000
# annees = 100
# croissance = 0.02 # 2% de croissance ou de décroissance chaque année
#
# # Initialiser la taille de la ville pour chaque année
# taille_ville = np.zeros(annees)
# taille_ville[0] = taille_ville_initiale
#
# # Random seed pour reproduire
# np.random.seed(117)
#
# # Boucle pour simuler l'évolution de la taille de la ville chaque année
# for i in range(1, annees):
#     # Calculer la croissance de la ville pour cette année
#     taux_croissance = np.random.uniform(-croissance, croissance)
#     taille_ville[i] = taille_ville[i-1] * (1 + taux_croissance)
#     # La taille de la ville ne peut pas être négative
#     if taille_ville[i] < 0:
#         taille_ville[i] = 0
#
# # Tracer l'évolution de la taille de la ville au fil des ans
# plt.plot(np.arange(annees), taille_ville)
# plt.xlabel('Années')
# plt.ylabel('Taille de la ville')
# plt.title('Évolution de la taille d\'une ville sur {} ans'.format(annees))
# plt.show()

'''Fonction qui simule la croissance ou décroissance d'une ville de 50000 avec 2% de croissance moyenne par an mais des fluctuations sur la moyenne de +/- 2% chaque année'''

import numpy as np
import matplotlib.pyplot as plt

# Set up parameters
N = 100 # Number of years
growth_rate = 0.02 # Mean growth rate
growth_std = 0.002 # Standard deviation of growth rate
population = np.zeros(N)

# Initialize population
population[0] = 50000

# Random seed pour reproduire
np.random.seed(117)

# Simulate population growth
for t in range(1, N):
    # Generate random growth rate for this year
    growth = np.random.normal(growth_rate, growth_std)

    # Compute new population
    population[t] = population[t-1] * (1 + growth)

# Plot population evolution
plt.plot(population)
plt.xlabel('Year')
plt.ylabel('Population')
plt.title('Population growth with plus or minus 2% rate fluctuations')
plt.show()


##
This is the proposed explanation for Zipf’s law. If cities grow randomly, with the same expected growth rate and the same standard deviation, the limit distribution will converge to Zipf’s law (car même moyenne et même variance est que ça suit la loi de Gibrat)
##


